#!/usr/bin/env python
""" A class describing a vulnerability """

from typing import List, Optional

from app.severity import Severity
from app.version import Version


class Vulnerability():
    """ Description of a vulnerability """

    def __init__(self, severity: Severity, exact_ver: Optional[Version] = None, min_ver: Optional[Version] = None, fix_ver: Optional[Version] = None, last_vulnerable: Optional[Version] = None, fixed: str = "", urls: Optional[List[str]] = None, description: Optional[str] = None, cves: Optional[List[str]] = None):
        """

        @param: severity Severity of this vulnerability
        @param: exact_ver: Exact version this vulnerability is in. Can be None
        @param min_ver: minimum version this vulnerability is in. Can be None
        @param max_ver: fix version. The first version where this is fixed:  Can be None
        """
        self.severity = Severity(severity)
        self.exact_version = exact_ver
        self.min_version = min_ver
        self.fix_version = fix_ver
        self.last_vulnerable_version = last_vulnerable
        self.fixed = fixed == "fixed"
        if cves is None:
            cves = []

        self.cves: List[str] = cves
        self.urls = urls

        self.description = description

    def version_is_vulnerable(self, version: Version) -> bool:
        """ Checks if a vulnerability is in a specific version

        This is extra complicated, the DB contains lots of special cases and is flexible
        """

        # Just one version causes trouble
        if self.exact_version is not None and version == self.exact_version:
            return True

        # Already fixed
        if self.fix_version is not None and self.fix_version <= version:
            return False

        # Already fixed
        if self.last_vulnerable_version is not None and self.last_vulnerable_version < version:
            return False

        # For sure: This is vulnerable. If it would be lower it would be harder to know.
        if self.last_vulnerable_version is not None and self.last_vulnerable_version == version:
            return True

        # a version range causes trouble but there is a fix after the last vulnerable version
        if self.min_version is not None and self.last_vulnerable_version is not None and self.min_version <= version < self.last_vulnerable_version:
            return True

        # a version range causes trouble but there is a fix. Starting from first version (min version is None)
        if self.min_version is None and self.last_vulnerable_version is not None and version < self.last_vulnerable_version:
            return True

        # a version range causes trouble but there is a fix
        if self.min_version is not None and self.fix_version is not None and self.min_version <= version <= self.fix_version:
            return True

        # a version range causes trouble but there is a fix. Starting from first version (min version is None)
        if self.min_version is None and self.fix_version is not None and version < self.fix_version:
            return True

        # a version range causes trouble but there is no fix
        if self.min_version is not None and self.min_version <= version:
            return True

        return False

    def get_cves(self) -> List[str]:
        """ Returns list of cves """
        return self.cves

    def __str__(self) -> str:
        cves = ",".join(self.get_cves())
        res = f"Severity {self.severity}; "
        res += f"CVEs: {cves}; "
        if self.min_version is not None:
            res += f"Min version: {self.min_version} "
        if self.fix_version is not None:
            res += f"Fix version: {self.fix_version} "
        if self.last_vulnerable_version is not None:
            res += f"Last vulnerable version: {self.last_vulnerable_version} "
        return res
