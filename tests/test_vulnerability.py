import unittest
from unittest.mock import patch, call
from app.vulnerability import Vulnerability
from app.version import Version
from app.severity import Severity

# https://docs.python.org/3/library/unittest.html


class TestVulnerability(unittest.TestCase):

    def test_init(self):
        v = Vulnerability(Severity.parse("low"))
        self.assertEqual(v.exact_version, None)
        self.assertEqual(v.min_version, None)
        self.assertEqual(v.fix_version, None)
        self.assertEqual(v.last_vulnerable_version, None)
        self.assertEqual(v.fixed, False)
        self.assertEqual(v.cves, [])
        self.assertEqual(v.urls, None)
        self.assertEqual(v.description, None)

    def test_get_cves(self):
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"])        
        self.assertEqual(v.get_cves(), ["Foo","Bar"])


    def test_get_str(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"])        
        self.assertEqual(str(v), res)
        
    def test_is_vulnerable_exact(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], exact_ver=Version("1.2.3"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_already_fixed1(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], fix_ver=Version("1.2.3"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_already_fixed2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], fix_ver=Version("1.2.2"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_already_fixed3(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], fix_ver=Version("1.2.2"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.0")))

    def test_is_vulnerable_last_vulnerable_1(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], last_vulnerable=Version("1.2.2"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_last_vulnerable_2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], last_vulnerable=Version("1.2.2"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.2")))

    def test_is_vulnerable_min_version_1(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_min_version_2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.0")))

    def test_is_vulnerable_min_version_3(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.2")))

    def test_is_vulnerable_min_and_last_version_1(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), last_vulnerable=Version("1.2.4"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.2")))

    def test_is_vulnerable_min_and_last_version_2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), last_vulnerable=Version("1.2.4"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_min_and_last_version_3(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.3"), last_vulnerable=Version("1.2.4"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.2")))

    def test_is_vulnerable_min_and_last_version_4(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), last_vulnerable=Version("1.2.4"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.5")))

    def test_is_vulnerable_last_version_hit(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], last_vulnerable=Version("1.2.4"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.4")))

    def test_is_vulnerable_last_version_hit2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], last_vulnerable=Version("1.2.4"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_min_and_fix_version_1(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), fix_ver=Version("1.2.4"))        
        self.assertTrue(v.version_is_vulnerable(Version("1.2.3")))

    def test_is_vulnerable_min_and_fix_version_2(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), fix_ver=Version("1.2.4"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.2.0")))

    def test_is_vulnerable_min_and_fix_version_3(self):
        res = """Severity LOW; CVEs: Foo,Bar; """
        v = Vulnerability(Severity.parse("low"), cves=["Foo","Bar"], min_ver=Version("1.2.2"), fix_ver=Version("1.2.4"))        
        self.assertFalse(v.version_is_vulnerable(Version("1.3.0")))